<!-- livebook:{"file_entries":[{"name":"hello_world_ios_app.png","type":"attachment"},{"name":"live_view_native_guides_xcode_open_existing_projec.png","type":"attachment"},{"name":"live_view_native_guides_xcode_open_existing_project.png","type":"attachment"},{"name":"logo.png","type":"attachment"},{"name":"xcode_live_view_guides_open_project.png","type":"attachment"}]} -->

# Getting Started

<!-- navigation-start -->
## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;"><div style="display: flex; margin-left: auto;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="">MapPic: Web</a>
<i class="ri-arrow-right-fill"></i>
</div></div>
<!-- navigation-end -->




## Setup

Before you setup **LiveView Native Guides** you'll need to install the following prerequisites:

* [Elixir](https://elixir-lang.org/install.html)
* [Phoenix](https://hexdocs.pm/phoenix/installation.html)
* [PostgreSQL](https://www.postgresql.org/download/)
* [Livebook](https://livebook.dev/)
* [Xcode](https://developer.apple.com/xcode/)

<!-- livebook:{"break_markdown":true} -->

### Clone the Project

HTTPS

```sh
$ git clone https://github.com/BrooklinJazz/liveview_native_guides.git
```

SSH

```sh
git clone git@github.com:BrooklinJazz/liveview_native_guides.git
```

<!-- livebook:{"break_markdown":true} -->

### Create the PostgreSQL Database

Run the following from the project `live_view_native_guides` folder to create the Database.

```
$ mix ecto.create
```

If this command fails, ensure you have Postgres installed.

By default, the project assumes you have a superuser named `postgres` with the password `postgres`. You can manage this configuration in `dev.exs` if you prefer to change these credentials.

<!-- livebook:{"break_markdown":true} -->

### Start the Phoenix Server

Navigate to the `live_view_native_guides` folder and start the Phoenix server. Make sure to set the `sname` and `cookie` flags as we'll use these later when we start the Livebook runtime as an attached node to the Phoenix server.

```
$ iex --sname test --cookie mycookie -S mix phx.server
```

<!-- livebook:{"break_markdown":true} -->

### Attached Node Runtime

**LiveView Native Guides** work best when you run the the Livebook runtime as an attached node to the included Phoenix project.

See this short video for instructions on how to start the Livebook runtime as an attached node: https://www.youtube.com/watch?v=vPrFBjgAMyM&t=2s&ab_channel=Livebook

Alternatively, to make this process easier, we've included a `.env` file in the project that you can use to set the default runtime.

```shell
export LIVEBOOK_DEFAULT_RUNTIME="attached:test:mycookie"
```

Ensure the included Phoenix server is always running with the same `sname` and `cookie` as Livebook when using these guides. We've used `test` and `mycookie` by default to minimize any friction but you can use your own values.

<!-- livebook:{"break_markdown":true} -->

### Hello Web

Evaluate the following example smart cell and visit http://localhost:4000 to ensure both Livebook and your Phoenix server are connected properly.

<!-- livebook:{"attrs":{"action":":index","code":"defmodule MyAppWeb.HelloLive do\n  use Phoenix.LiveView\n  use LiveViewNative.LiveView\n\n  @impl true\n  def render(%{platform_id: :swiftui} = assigns) do\n    # This UI renders on the iPhone / iPad app\n    ~SWIFTUI\"\"\"\n    <VStack>\n      <Text>\n        Hello native!\n      </Text>\n    </VStack>\n    \"\"\"\n  end\n\n  @impl true\n  def render(%{} = assigns) do\n    # This UI renders on the web\n    ~H\"\"\"\n    <div class=\"flex w-full h-screen items-center bg-red-500\">\n      <span class=\"w-full text-center\">\n        Hello web!\n      </span>\n    </div>\n    \"\"\"\n  end\nend","path":"/"},"chunks":null,"kind":"Elixir.KinoLiveView.SmartCell","livebook_object":"smart_cell"} -->

```elixir
import Kernel, except: [defmodule: 2]
import KinoLiveView.SmartCell, only: [defmodule: 2, register: 2]

defmodule MyAppWeb.HelloLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    # This UI renders on the iPhone / iPad app
    ~SWIFTUI"""
    <VStack>
      <Text>
        Hello native!
      </Text>
    </VStack>
    """
  end

  @impl true
  def render(%{} = assigns) do
    # This UI renders on the web
    ~H"""
    <div class="flex w-full h-screen items-center bg-red-500">
      <span class="w-full text-center">
        Hello web!
      </span>
    </div>
    """
  end
end
|> register("/")

import KinoLiveView.SmartCell, only: []
import Kernel
:ok
```

### Hello Native

Start Xcode and open the existing `LiveViewNativeGuides` project included in the `native/swiftui` folder of this project.

<!-- livebook:{"break_markdown":true} -->

![](files/live_view_native_guides_xcode_open_existing_project.png)

<!-- livebook:{"break_markdown":true} -->

Press the start button (<i class="ri-play-fill"></i>) on Xcode once the project has finished indexing to start the **LiveView Native Guides** SwiftUI project on the Xcode simulator.

<!-- livebook:{"break_markdown":true} -->

![](files/xcode_live_view_guides_open_project.png)

<!-- livebook:{"break_markdown":true} -->

The SwiftUI application should open on your device.

<!-- livebook:{"break_markdown":true} -->

<img height="100%" width="50%" src="files/hello_world_ios_app.png" />

<!-- livebook:{"break_markdown":true} -->

### Live Reloading

Now you can make changes to LiveViews by re-evaluating a smart cell, or evaluating a new cell that replaces the existing LiveView.

For example, evaluate the smart cell below and notice that both the web and native applications live update.

<!-- livebook:{"attrs":{"action":":index","code":"defmodule LiveViewNativeGuidesWeb.HelloLive do\n  use Phoenix.LiveView\n  use LiveViewNative.LiveView\n\n  @impl true\n  def render(%{platform_id: :swiftui} = assigns) do\n    # This UI renders on the iPhone / iPad app\n    ~SWIFTUI\"\"\"\n    <VStack>\n      <Text>\n        Hello updated native!\n      </Text>\n    </VStack>\n    \"\"\"\n  end\n\n  @impl true\n  def render(%{} = assigns) do\n    # This UI renders on the web\n    ~H\"\"\"\n    <div class=\"flex w-full h-screen items-center bg-red-200\">\n      <span class=\"w-full text-center\">\n        Hello updated web!\n      </span>\n    </div>\n    \"\"\"\n  end\nend","path":"/"},"chunks":null,"kind":"Elixir.KinoLiveView.SmartCell","livebook_object":"smart_cell"} -->

```elixir
import Kernel, except: [defmodule: 2]
import KinoLiveView.SmartCell, only: [defmodule: 2, register: 2]

defmodule LiveViewNativeGuidesWeb.HelloLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    # This UI renders on the iPhone / iPad app
    ~SWIFTUI"""
    <VStack>
      <Text>
        Hello updated native!
      </Text>
    </VStack>
    """
  end

  @impl true
  def render(%{} = assigns) do
    # This UI renders on the web
    ~H"""
    <div class="flex w-full h-screen items-center bg-red-200">
      <span class="w-full text-center">
        Hello updated web!
      </span>
    </div>
    """
  end
end
|> register("/")

import KinoLiveView.SmartCell, only: []
import Kernel
:ok
```

### Troubleshooting

You can [raise an Issue](https://github.com/BrooklinJazz/liveview_native_guides/issues/new) if you have any trouble setting up the project or encounter any issues.

You can also contact Brooklin Myers at brooklin.myers@dockyard.com or DM on twitter [@BrooklinJMyers](https://twitter.com/BrooklinJMyers) for support.

<!-- navigation-start -->
## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;"><div style="display: flex; margin-left: auto;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="">MapPic: Web</a>
<i class="ri-arrow-right-fill"></i>
</div></div>
<!-- navigation-end -->


